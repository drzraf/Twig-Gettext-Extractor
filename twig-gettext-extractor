#!/usr/bin/env php
<?php

/**
 * This file is part of the Twig Gettext utility.
 *
 *  (c) Саша Стаменковић <umpirsky@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * Extracts translations from twig templates.
 *
 * @author Саша Стаменковић <umpirsky@gmail.com>
 * @author Raphaël Droz <raphael.droz+floss@gmail.com>
 */

if (file_exists($a = __DIR__ . '/../../autoload.php')) {
    require_once $a;
} else {
    require_once __DIR__ . '/vendor/autoload.php';
}

use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Input\InputDefinition;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;


// You can add more extensions here, or via command line with the --functions and --filter options
$input = new ArgvInput($argv, new InputDefinition([
    new InputOption('exec', null, InputOption::VALUE_REQUIRED, 'xgettext binary', 'xgettext'),
    new InputOption('files', null, InputOption::VALUE_REQUIRED, 'template files'),
    new InputOption('dir', null, InputOption::VALUE_REQUIRED, 'template directory', '.'),
    new InputOption('functions', null, InputOption::VALUE_REQUIRED, 'custom Twig extensions to load'),
    new InputOption('filters', null, InputOption::VALUE_REQUIRED, 'custom Twig filter to support'),
    new InputOption('require', null, InputOption::VALUE_REQUIRED, 'Additional PHP file to require'),
    new InputOption('debug', 'd', InputOption::VALUE_NONE),
    new InputArgument('gettext_parameters', InputArgument::IS_ARRAY, 'Additional xgettext parameters', [])
]));

// Twig Loaders options
$loaders = new  Twig_Loader_Chain();

if ($input->getOption('dir')) {
    $directory_loader = new \Twig_Loader_Filesystem( explode(',', $input->getOption('dir')) );
    $loaders->addLoader($directory_loader);
}
if ($input->getOption('files')) {
    $files = [];
    foreach(explode(',', $input->getOption('files')) as $f) {
        if (file_exists($f)) {
            $files[$f] = file_get_contents($f);
        }
    }
    $loaders->addLoader(new Twig_Loader_Array($files));
}

// Loader initialized => Initialize Twig Environment
$cachedir = implode(DIRECTORY_SEPARATOR, [sys_get_temp_dir(), 'cache', uniqid()]);
$twig = new Twig_Environment($loaders, [
    'cache' => $cachedir,
    'auto_reload' => true
]);
$twig->addExtension(new Twig_Extensions_Extension_I18n());
$twig->addExtension(new Symfony\Bridge\Twig\Extension\TranslationExtension(
    new Symfony\Component\Translation\Translator(null)
));
$twig->addExtension(new Symfony\Bridge\Twig\Extension\RoutingExtension(
    new Twig\Gettext\Routing\Generator\UrlGenerator()
));
$twig->addExtension(new Symfony\Bridge\Twig\Extension\FormExtension());
$twig->addExtension(new Symfony\Bridge\Twig\Extension\AssetExtension(
    new Symfony\Component\Asset\Packages()
));

if ($input->getOption('debug')) {
    $twig->enableDebug();
}
if ($input->getOption('functions')) {
    foreach (explode(',', $input->getOption('functions')) as $functionName) {
        $twig->addFunction(new \Twig_SimpleFunction($functionName, true));
    }
}
if ($input->getOption('filters')) {
    foreach (explode(',', $input->getOption('filters')) as $filterName) {
        $twig->addFilter(new \Twig_SimpleFilter($filterName, function($e) { return ""; }));
    }
}

// Twig Environment is up => initialize extractor
$extractor = new Twig\Gettext\Extractor($twig);
$extractor->setGettextParameters($input->getArgument('gettext_parameters'));
$extractor->setExecutable($input->getOption('exec'));

if ($input->getOption('require')) {
    require_once($input->getOption('require'));
}

// compile
if ($input->getOption('files')) {
    if ($input->getOption('files') == 'stdin') {
        $files = explode("\n", trim(file_get_contents('php://stdin')));
    }
    else {
        $files = explode(',', $input->getOption('files'));
    }
    foreach($files as $f) {
        $extractor->addTemplate($f);
    }
}

$extractor->extract();
